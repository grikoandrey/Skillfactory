"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY_NEWSPAPER')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

AUTHENTICATION_BACKENDS = [      # # Этого раздела может не быть, добавьте его в указанном виде.
    'django.contrib.auth.backends.ModelBackend',  # реализующий аутентификацию по username;
    'allauth.account.auth_backends.AuthenticationBackend',]  # бэкенд аутентификации, предоставленный пакетом
# 'allauth.socialaccount.backends.telegram.TelegramOAuth2Adapter',]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # additional apps
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django_filters',
    'django_apscheduler',  # для задачь по расписанию
    # apps for allauth. три обязательных приложения для работы allauth и одно,
    # которое добавит поддержку входа с помощью Yandex
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.yandex',
    # 'allauth.socialaccount.providers.vk',
    'allauth.socialaccount.providers.telegram',
    # 'allauth.socialaccount.providers.mailru',
    # 'allauth.socialaccount.providers.instagram',
    # 'allauth.socialaccount.providers.github',
    # 'allauth.socialaccount.providers.facebook',
    # users apps:
    # 'news',  # заменено на уточняюшую формулировку для сигналов
    'news.apps.NewsConfig',
    'accounts',
]

SITE_ID = 1

LOGIN_REDIRECT_URL = '/portal'
LOGOUT_REDIRECT_URL = '/portal'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # additionally
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    # mandatory for allauth
    'allauth.account.middleware.AccountMiddleware'
]

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the required client
        # credentials, or list them here:
        'APP': {'client_id': os.getenv('GOOGLE_CLIENT_ID'),
                'secret': os.getenv('GOOGLE_SECRET')}},
    # 'mailru': {
    #     'APP': {'client_id': os.getenv('MAILRU_CLIENT_ID'),
    #             'secret': os.getenv('MAILRU_SECRET')}},
    'yandex': {
        'APP': {'client_id': os.getenv('YANDEX_CLIENT_ID'),
                'secret': os.getenv('YANDEX_SECRET')}},
    'telegram': {
        'APP': {'client_id': os.getenv('TELEGRAM_CLIENT_ID'),
                'secret': os.getenv('TELEGRAM_SECRET')}},  # Токен вашего Telegram бота
    # 'facebook': {
    #     'METHOD': 'oauth2',
    #     'SCOPE': ['email', 'public_profile'],  # запрашиваемые разрешения
    #     'AUTH_PARAMS': {'auth_type': 'reauthenticate'},
    #     'INIT_PARAMS': {'cookie': True},
    #     'FIELDS': [
    #         'id',
    #         'first_name',
    #         'last_name',
    #         'middle_name',
    #         'name',
    #         'name_format',
    #         'picture',
    #         'short_name'
    #     ],
    #     'EXCHANGE_TOKEN': True,
    #     'LOCALE_FUNC': 'path.to.callable',
    #     'VERIFIED_EMAIL': False,
    #     'VERSION': 'v13.0',
    #     'GRAPH_API_URL': 'https://graph.facebook.com/v13.0',
    # }
}


ROOT_URLCONF = 'NewsPaper.urls'

TEMPLATES = [
    {'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',  # контекстный процессор
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # added apps for allauth
                # 'django.template.context_processors.request'
            ],
        },
     },]

WSGI_APPLICATION = 'NewsPaper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', },
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', },
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', },
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# additionally
STATICFILES_DIRS = [BASE_DIR/'static']

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Constance for allauth
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
# ACCOUNT_CONFIRM_EMAIL_ON_GET = True  # для перехода сразу на страницу входа
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1  # срок действия ссылки для подтверждения

ACCOUNT_FORMS = {'signup': 'accounts.forms.CustomSignupForm'}  # добавили применение кастом-формы
SITE_URL = 'http://127.0.0.1:8000'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # не обязательный параметр, по умолчанию
EMAIL_HOST = 'smtp.yandex.ru'  # хост почтового сервера
EMAIL_PORT = 465  # порт, на который почтовый сервер принимает письма
EMAIL_HOST_USER = os.getenv('USER_NAME_YANDEX')  # логин пользователя почтового сервера
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_PASSWD_YANDEX")  # пароль пользователя почтового сервера
EMAIL_USE_TLS = False  # необходимость использования TLS, см. настройку сервера
EMAIL_USE_SSL = True  # необходимость использования SSL

DEFAULT_FROM_EMAIL = os.getenv('USER_NAME_YANDEX')  # почтовый адрес отправителя по умолчанию

SERVER_EMAIL = os.getenv('USER_NAME_YANDEX')  # адрес почты для отправки админам и менеджерам
EMAIL_SUBJECT_PREFIX = 'NewsPortal'
MANAGERS = (('Andrey', os.getenv('USER_NAME_YANDEX')),
            # ('Petr', 'petr@yandex.ru'),
            )
ADMINS = (('Andrey', os.getenv('USER_NAME_YANDEX')), )

# APSCHEDULER_DATETIME_FORMAT = 'N j, Y, f:s a'  № внутрениий формат даты
# APSCHEDULER_RUN_NOW_TIMEOUT = 25  # время работы функции для контроля памяти

CELERY_BROKER_URL = 'redis://localhost:6379'  # указывает на URL брокера сообщений (Redis).
# По умолчанию находится на порту 6379
CELERY_RESULT_BACKEND = 'redis://localhost:6379'  # указывает на хранилище результатов выполнения задач
CELERY_ACCEPT_CONTENT = ['application/json']  # допустимый формат данных
CELERY_TASK_SERIALIZER = 'json'  # метод сериализации задач
CELERY_RESULT_SERIALIZER = 'json'  # метод сериализации результатов
